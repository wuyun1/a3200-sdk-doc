.. libstorage main documentation

.. include:: <isonum.txt>

.. |libstorage| replace:: GomSpace Storage Library

.. _libstorage:

************
|libstorage|
************

.. toctree::
   :maxdepth: 3

Introduction
============

The |libstorage| contains implementations of two embedded filesystems (UFFS and FAT) and a Virtual File System layer (VFS) that provides an abstraction of the APIs for the two filesystems. The VFS layer ensures that code using the filesystems can be written in a portable manner, using the C standard library file access primitives such as ``fopen``, ``fread``, and ``fwrite``. A set of GOSH command-line functions for the filesystems are also included in the library. These are implemented in ``libstorage/src/vfs/cmd_fs.c``.

The figure below shows the call chain from C standard library functions to filesystem specific calls.

.. figure:: img/vfs.png
   :align: center
   :width: 40 %

   File System interfaces

On the NanoMind A3200, the UFFS filesystem is used on the 128 MB SPI flash. The UFFS partition is mounted at ``/flash``, so all filesystem paths should be prefixed with this string. NanoMind A712D systems use UFFS for the 2 MB parallel NOR flash, mounted at ``/boot``, and FAT for the SD-card which is mounted under ``/sd``. The VFS layer uses the mount point prefix to select the device specific filesystem functions.

FAT Filesystem
--------------

The FAT filesystem is a logic block-filesystem that has no knowledge of the physical storage medium below. For this reason the FAT filesystem can only be used with disk-drives that has an embedded storage manager which takes care of mapping the virtual sectors, clusters and pages into physical memory, such as an SD-Card.

The FAT system consists of a small and simple C-implementation of the filesystem called `ChaN-FS <http://elm-chan.org/fsw/ff/00index_e.html>`_ and an SD-SPI driver written by GomSpace. The driver utilizes the direct memory access (DMA) function of the SPI peripheral. This means that entire pages of 512 bytes can be written without the processor being interrupted.

All public API functions of the FAT filesystem are available in the include file ``fat_sd/ff.h``. The FAT functions are prepended with ``f_``, like ``f_open``, ``f_read``, ``f_write`` and ``f_close``. The details about calling these functions can be found in the official documentation referenced in the table above.

The built-in C standard library functions, ``fopen``, ``fread``, ``fwrite`` and ``fclose`` can be used with the FAT filesystem if the partitions name ``/sd/`` is used in front of the filename. If you wish to keep your code portable, using the POSIX API is the recommended.

.. note:: The stability of the FAT filesystem can be compromised by turning off the power during a write. This will typically result in the written file being truncated to zero size, which means loss of data. In rare occasions the power-loss could corrupt the FAT table, which would require a new formatting of the filesystem (see ``f_mkfs`` and the ``mkfs`` GOSH command). The FAT filesystem should therefore not be used for storing mission critical information such as configuration files unless care is taken to verify the validity of the data.

UFFS Filesystem
---------------

As a result of the inherent reliability issues with a FAT filesystem, GomSpace has implemented and ported a journalized filesystem designed for NAND and NOR flash called `UFFS <http://sites.google.com/site/gouffs/>`_. This filesystem can use either the built in external memory controller on the A712D or the serial SPI flash on the A3200.

UFFS manages all the pages and blocks on the NOR flash directly and will ensure an even load of the flash pages. This makes it much more robust and it can theoretically survive a power-cut at any time.

If a problem occurs during the writing of a flash page, UFFS will mark the entire block as a bad block, and not attempt writing to it again. The user must be aware that at some point, all blocks could be marked as bad and the filesystem will mount without any storage capacity. In such a case, user intervention is required in order to try to recover bad blocks. The easiest way to reset the bad blocks is to format the filesystem. In the event that all blocks are damaged, which will happen once the FLASH medium wears out, the filesystem will be unable to mount. In this case a reformat and reboot will put the system into a reboot-loop, and potentially render the OBC responseless. A safe mechanism to be able to execute without filesystem is therefore recommended.

In order to use the UFFS filesystem, use the ``uffs_open``, ``uffs_read`` etc. API functions. You can also use the Newlib C-library as a wrapper (and cache) with the ``fopen``, ``fread`` etc. calls. If you wish to keep your code portable, the POSIX API is the best choice. The POSIX api is in ``stdio.h`` and the UFFS API in ``uffs/uffs_fd.h``

.. note:: The UFFS implementation has some limitations to the usage. The maximum number of open files are 10 and maximum dir handles 5. Furthermore the page cache of a file is kept per file handle, so two simultaneous file handles to the same file is not possible. Finally, if a file handle is shared between two tasks, external locking will be required since the UFFS is not thread safe when sharing handles. Generally sharing files should be avoided if possible.

.. note:: The UFFS cache will not automatically flush data to the filesystem, so to ensure your data is written use ``fsync()`` or ``uffs_sync()`` after writing. Closing the file will also trigger a cache flush.

Structure
=========

The |libstorage| is structured as follows:

.. csv-table::
   :header-rows: 0
   :header: "**Folder**", "**Description**"
   :widths: 30, 70

   "| libstorage/include", "| |libstorage| API header files."
   "| libstorage/src/fat", "| FAT implementation and device driver."
   "| libstorage/src/uffs", "| UFFS implementation and device drivers."
   "| libstorage/src/vfs", "| This folder contains the VFS layer."
   "| libstorage/doc", "| The doc folder contains the source code for this documentation."

The ``libstorage/src`` directory also contains ``syscalls_vfs.c`` which implements Newlib system calls that integrate with the VFS layer.

Implementation
==============

Initialization of the storage layer and mounting of filesystems takes place during startup of the system. On both the NanoMind A3200 and A712D, the operations run in separate tasks to avoid blocking the system while booting. The time it takes to mount a filesystem is dependent on the usage of the partition, and can take several minutes if the device is full. Empty or sparsely used filesystems usually mount in less than 30 seconds.

NanoMind A3200
--------------

On A3200 systems, the filesystem setup is implemented in the ``task_mount()`` function in ``liba3200/src/task_init.c``. The task first initializes the Spansion SPI flash using ``spn_fl512s_init()``. The VFS layer is then configured using ``vfs_init()``, which takes a list of ``struct vfs_partitions`` elements as argument. Each element contains the name of the partition (in the ``name`` field) and a struct with filesystem specific functions (the ``fops`` structure). Since the A3200 only have one partition, the list only contains one element:

.. code-block:: c

  static struct vfs_partition part_table[] = {
      {
          .name = "flash",
          .fops = &vfs_uffs_ops,
      },
  };

Next, the UFFS filesystem on the flash partition is initialized. This consists of allocating memory buffers for the filesystem state and caches, linking the SPI flash driver to the filesystem, and actually mounting the partition using ``uffs_Mount()``:

.. code-block:: c

  int flash_static_buffer_size = UFFS_STATIC_BUFF_SIZE(FL512S_PAGES_PER_BLOCK, FL512S_PAGE_SIZE, FL512S_PAR_BLOCKS);
  flash_static_buffer = pvPortMalloc(flash_static_buffer_size);

  uffs_MemSetupStaticAllocator(&fl512s_device.mem, flash_static_buffer, flash_static_buffer_size);
  uffs_RegisterMountTable(&flash_table);
  uffs_Mount("/flash/");

  uffs_InitFileSystemObjects();

Note that error handling has been omitted in the code excerpt above to keep it shorter. If the UFFS partition is succesfully mounted, it is linked to the FTP server by calling ``ftp_register_backend(BACKEND_FILE, &backend_file);``.

NanoMind A712D
--------------

On A712D systems, the storage initialization is implemented in the ``init_storage()`` function in ``liba712/src/board/task_init.c``. The VFS and UFFS initialization is similar to the A3200, with the exception that the VFS partition table now contains both a UFFS and a FAT partition.

The SD-card is configured in SPI mode. If succesful, the on-disk FAT filesystem is then mounted using ``f_mount()``. Like the A3200, the FTP file backend is registered using ``f_register_backend()`` to provide access to the UFFS and FAT partitions via FTP.

GOSH Commands
=============

The GomSpace Shell includes a number of commands for debugging the filesystems. Most commands are named to match the corresponding Linux shell commands (e.g ``ls``, ``rm``, ``cp``).

============   =========================================
**Command**    **Description**
============   =========================================
uffs           UFFS specific commands
testfs         Test R/W-speeds
ls             List files in directory
rm             Remove file
mv             Move or rename file
cp             Copy file
mkdir          Make directory
touch          Create empty file
cat            Show the contents of a file
append         Append data (basic file editor)
chksum         Calculate CRC32 checksum of a file
hexdump        Show the contents of a file in hex format
mkfs           Recreate filesystem
df             show filesystem usage
============   =========================================

Like all GOSH commands, the expected command arguments can be listed by entering the command name and pressing the ``<tab>`` key. The ``df`` command is used for showing the status of the mounted filesystems. On an A712D with NOR flash and SD-card, the output will look like this::

    nanomind # df
    Filesystem    Size    Used   Avail  Use% Mounted on
    uffs          1.9M  124.0K    1.8M    6% /boot
    fat        1905.0M  128.0K 1904.9M    0% /sd

``mkfs`` can be used to recreate a filesystem. **Note that this will permanently erase all stored files**. To use it, simply run ``mkfs <partition>``, where the partition string is the mountpoint without preceeding slash, i.e. ``mkfs sd`` to recreate the FAT filesystem on the SD-card. Be aware that recreating the filesystems can take up to 2 minutes.
