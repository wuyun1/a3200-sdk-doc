.. libparam main documentation

.. include:: <isonum.txt>

.. |libparam| replace:: GomSpace Parameter Library

**********
|libparam|
**********

.. toctree::
   :maxdepth: 3
   

Introduction
============

GomSpace Parameter System is a light-weight parameter system designed for GomSpace satellite subsystems. 
It is based around a logical memory architecture, where every parameter is referenced directly by its logical address. 
A backend system takes care of translating addresses into physical addresses. The features of this system includes:

* Direct memory access for quick parameter reads
* Simple datatypes: uint, int, float, double, string and hex
* Arrays of data
* Simple static parameter table and setup
* Multiple backends for non-volatile storage: FRAM and FILE
* Scratch memory and running memory configurations
* Remote client with full support for all commands
* Packed GET, SET queries with multiple parameters
* Simple data-set serialization and deserialization
* Supports both little and big-endian systems
* Gomspace Shell (GOSH) commands for both local and remote access
* Built-in CSP parameter server
* Service oriented Architecture (SoA) support with full download of parameter tables
* Autogeneration of client GUI
* Compile-time configuration of parameter system

.. _libparam_principle_of_operation:

Basic Principle of operation
----------------------------
The parameter system is a generic system that translates a memory area into network messages and vice-versa.
It has two basic operations: Read or Write. This basic operation is how most memory works and is something that most programmers can understand.
Therefore the parameter system have been designed to work just like you would expect a memory to work.
However it also throws in some more added benefits such as parameter tables, object serialization, arrays, data locking and intuitive client interfaces.
To best demonstrate this principle, let's take a simple example:

.. figure:: img/command_example.png
   :width: 80 %
   
   Example of Set and Get commands

In this example, a set command is sent from the client to the memory, to update the parameter with address 0x00.
The response is an OK message. Later the client issues a get command to the memory and receives the value that was stored.
While this example shows the basic principle, it is of course pretty difficult for the programmer to be able to remember the address 0x00 of a given parameter.
Therefore the parameter system only uses addresses internally. Externally to the programmer, only parameter names are used.
The next example will show how parameter tables work:


Parameter tables
----------------
In order to translate from names to addresses, a parameter table is used:

.. csv-table:: Parameter table example
   :header-rows: 1
   :header: "**Address**", "**Name**", "**Type**", "**Description**"
   :widths: 10, 30, 10, 60

   "0x00", "param1", "U32", "Parameter 1"
   "0x04", "param2", "U32", "Parameter 2"

The complexity of packing and unpacking data into messages is now handled by the parameter system based upon a pre-shared parameter-table.
This means that a command such as 'set param1 to 0x1234' can easily be translated into a request by the client.

.. figure:: img/translate_example.png
   :width: 80 %
   
   Parameter Translator example

Here the first abstraction have been performed by the parameter translator.
This now uses the address and type of the parameter 'param1' to generate a c-function that can be called by the source code.
This c-function will ensure proper locking of the memory while the parameter is read and make sure that the data is also in the correct endian and datatype when returned.

*This interface is known as the source API and is only available on a local system compiled with the parameter system library 'libparam'. 
For more details on the source API, please consult the parameter system manual.*

Network service
---------------
In order for the parameter system to work across multiple nodes, a client/server network API has been added also.
The client and server shares the same serialization core, which is based on the parameter tables shown above.
This means that a simple request can be sent over the network in a simple manner, without having to write any specific software client for a given command.

.. figure:: img/network_example.png
   :width: 90 %
   
   Network Example

The parameter client can now use a pre-shared parameter table from a remote systems to generate lists and change parameters on remote systems.

Parameter storage
-----------------

The final thing that the parameter system needs is a method to store configurations into non-volatile memory.
The parameter system is not limited to one or two types of memory, but for the most common setups there will be one 
volatile memory such as the RAM and another non-volatile memory such as FRAM or FLASH. This can be illustrated in the following way:

.. figure:: img/param_storage.png
   :width: 80 %
   
   Parameter Storage overview

The memory map for the volatile RAM memory is quite normal. Each set of parameters, each have their own reserved area in physical memory, 
and each logical parameter address then uniquely translates into a physical address by adding with an offset for the given parameter table.
In this example the system have two tables, 0 which is used for configuration and 4 which is used for telemetry data.
The storage system solves 2 issues for the parameter system:

Storing of multiple system configurations with fallback to factory configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The parameter system has a storage backend which allows storing copies of parameter tables to a file.
In this case the FRAM has an extremely simple filesystem where every file is denoted with a number and that number directly translates into a memory address.
In the example, file number zero is used as the default configuration that will be loaded into RAM during the system boot-up.
This configuration can be loaded, saved or cleared at any time. If file number zero does not contain a valid configuration (verified by a checksum),
then the system could continue to load from other file-id's in a certain order.
In the example the system will try to load from file number 111 after failing at file number zero.
This file number is special because the address resolves to an area of the FRAM chip which is write protected, so this area can be great to store a read-only fallback configuration.

Storage of persistent data (bootcounter, etc.)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The other thing that the FRAM chip is particularly good at, is storing rapidly changing persistent parameters. This could for example be a boot counter.
If a parameter is marked with the PARAM_F_PERSIST in the parameter table and if a valid FRAM address has been initialized,
every write operation to a persistent parameter will yield an update of the value stored in FRAM.
After a reboot the FRAM will be checked for any stored persistent parameters and the value stored in RAM will be initialized from that.
The advantage of using persistent parameters is that they are relatively cheap to update and does not require any checksums or similar.
That means that they can be used for rapidly changing values without worrying about execution speed and storage wear.
The disadvantage is that during initialization there is no checksum on the value stored in FRAM. Due to the direct memory mapping there is no
further checksum on each individual persistent parameter.
This means that if the FRAM fails during startup, garbage could be loaded into the persistent parameters.
Therefore these should not be used for critical configuration variables.
The configuration files are however protected against corruption and a very good place to put critical variables.
However updating the configuration and running a save on each variable change costs a bit more resources.


System overview
===============

The parameter system is separated into three modules:

* **Parameter Host API**: This is the local interface used by the firmware on a subsystem
* **Parameter Service**: This module defines the network interfaces and implements a CSP service task to process incoming get/set requests.
* **Parameter Client API**: This module contains functions for sending get/set requests to a parameter service.

On top of these three modules lies a client layer where there is two shell-modules:

* **Local interface 'param'**: This is a set of commands that uses the Host API to modify parameters. This enables sending parameter commands directly to a system using the gomspace shell on the debug interface.
* **Remote client 'rparam'**: This is a set of commands that uses the Client API and the network to send requests to a remote parameter service. This can be used to remotely operate another subsystem over a CSP link. For example the spacelink. 

This can be illustrated in the following way:

.. figure:: img/param_system.png
   :width: 70 %
   
   Parameter system modules

GOSH: Local parameter interface
===============================

The local parameter interface can be used to directly modify the paramters of a system using the debug interface only. It's a quick and direct method of interfaceing to the parameter system which bypasses all network communication completely and goes directly to the memory of a running system. It can therefore be used as debugging tool on a running system, without having to bother with setup of a parameter service and client.
Here is a list of sub-commands to the 'param' command:

.. code-block:: c

   nanocom-ax # param
   'param' contains sub-commands:
     mem                 Set cmds working mem
     list                List parameters
     set                 Set parameter
     setq                Set parameter (quiet)
     get                 Get parameter
     copy                Copy parameter sets from mem to mem
     load                Load config from file/fram to mem
     save                Save config from mem to file/fram
     clear               Clear config from file/fram

The local client can be used by simply typing 'param get <name>' or 'param set <name> <value>', here is an example:

.. code-block:: c

   nanocom-ax # param get rx_freq                                                               
     GET rx_freq = 437250000                                                                    
   nanocom-ax # param set rx_freq 437555000                                                     
     SET rx_freq = 437555000 (4)                                                                
   nanocom-ax # param get rx_freq                                                               
     GET rx_freq = 437555000                 

The example shows the 'rx_freq' parameter before and after setting the value using the 'set' command.
Another example is the 'param list' command, which will return the parameter table, and the value of each parameter. 
Here is an example from the NanoCom AX100.

.. code-block:: c

   nanocom-ax # param list                                                                      
     0x0000 rx_freq                U32 437555000                                                
     0x0004 rx_baud                U32 4800                                                     
     0x000C rx_bw                  U32 15000                                                    
     0x0020 tx_freq                U32 437250000                                                
     0x0024 tx_baud                U32 4800                                                     
     0x0028 tx_modindex            FLT 0                                                        
     0x002C preamb                 X8  0x55                                                     
     0x002D preamblen              U8  50                                                       
     0x002E preambflags            U8  56                                                       
     0x002F intfrm                 X8  0x7E                                                     
     0x0030 intfrmlen              U8  0                                                        
     0x0031 intfrmflags            U8  56                                                       
     0x0034 tx_guard               U16 50                                                       
     0x0032 tx_max_time            U16 10                                                       
     0x0036 tx_rssibusy            I16 -95                                                      
     0x0038 rx_idle_s              U16 3600                                                     
     0x003A mode                   U8  2                                                        
     0x003B fcs                    U8  1                                                        
     0x0040 pllrang_rx             U8  9                                                        
     0x0041 pllrang_tx             U8  9                                                        
     0x0044 max_temp               I16 60                                                       
     0x0050 csp_node               U8  5                                                        
     0x0060 reboot_in              U16 0                                                        
     0x0064 tx_inhibit             U32 0                                                        
     0x0070 bcn_interval           U32 10                                                       
     0x0074 bcn_holdoff            U32 4800                                                     
     0x0078 bcn_epsdata            U8  1         
   
Another very important command is the 'param mem <memid>' command, which will change the currently selected memory for the interface.
For example the AX100 has two parameter tables, 0 which is the running configuration, and 4 which is the telemetry table.
Changing the param mem-id will change which memory area that the get/set/list commands operate on.
The default parameter table selected is 0. Here is an example from the AX100 after selecting the telemetry table 4.

.. code-block:: c

   nanocom-ax # param mem 4
   Using param mem 4
   nanocom-ax # param list
     0x0000 temp_brd               I16 248
     0x0002 temp_pa                I16 257
     0x0004 last_rssi              I16 -103
     0x0006 last_rferr             I16 143
     0x0008 tx_count               U32 0
     0x000C rx_count               U32 0
     0x0010 tx_bytes               U32 0
     0x0014 rx_bytes               U32 0
     0x0020 boot_count             U16 32
     0x0024 boot_cause             X32 0x00000100
     0x0028 last_contact           U32 946855591
     0x0030 tot_tx_count           U32 32537
     0x0034 tot_rx_count           U32 172097
     0x0038 tot_tx_bytes           U32 4902966
     0x003C tot_rx_bytes           U32 35692697

The 'save/load/copy/clear' commands can be used to move entire tables between different memories.
For example to load the default boot configuration which is stored in file number zero the command is:

.. code-block:: c

   param load 0 0

This tells the system to read the contents of file number zero into the parameter table with index zero.
The same goes for saving a configuration back to the file

.. code-block:: c

   param save 0 0

Or to completely clear a file:

.. code-block:: c

   param clear 0

GOSH: Remote parameter client
=============================

The remote parameter system client can be used to remotely update paramters on other systems from a GOSH command interface.
The 'rparam' client must first be initialized by downloading the list of remote parameters:

.. code-block:: c

   nanocom-ax # rparam download 5 1
   Downloading RPARAM table for node 5 on port 7, with endian set big = 1
   Checksum is: 0xB670
     0x0000 rx_freq        
     0x0004 rx_baud        
     0x000C rx_bw          
     0x0020 tx_freq        
     0x0024 tx_baud        
     0x0028 tx_modindex    
     0x002C preamb         
     0x002D preamblen      
     0x002E preambflags    
     0x002F intfrm         
     0x0030 intfrmlen      
     0x0031 intfrmflags    
     0x0034 tx_guard       
     0x0032 tx_max_time    
     0x0036 tx_rssibusy    
     0x0038 rx_idle_s      
     0x003A mode           
     0x003B fcs            
     0x0040 pllrang_rx     
     0x0041 pllrang_tx     
     0x0044 max_temp       
     0x0050 csp_node       
     0x0060 reboot_in      
     0x0064 tx_inhibit     
     0x0070 bcn_interval   
     0x0074 bcn_holdoff    
     0x0078 bcn_epsdata    

Now that the 'rparam' client knows which parameters exists on the remote system, we can request or modify individual parameters:

.. code-block:: c

   nanocom-ax # rparam get preamblen                                                            
     REP preamblen = 50 (1)                                                                     
   nanocom-ax # rparam set preamblen 70                                                         
     INP preamblen = 70                                                                         
   Result: 1                                                                                    
   nanocom-ax # rparam get preamblen                                                            
     REP preamblen = 70 (1)   

We can also modify more than one parameter at once by disabling the 'rparam autosend' function and build up more than one get call for each rparam query:

.. code-block:: c

   nanocom-ax # rparam autosend 0                                                               
   rparam autosend set to 0                                                                     
   nanocom-ax # rparam get rx_freq                                                              
   nanocom-ax # rparam get tx_freq                                                              
   nanocom-ax # rparam send                                                                     
     REP rx_freq = 437555000 (4)                                                                
     REP tx_freq = 437250000 (4) 

This function is very useful when changing both the uplink and downlink baudrate of a radio.
Putting multiple set calls into one packet ensures that the system will never do a partial parameter update.

Network API
===========

This section will document the following parameter commands:

.. csv-table:: List of parameter commands
   :header-rows: 1
   :header: "**CMD**", "**Name**", "**Description**"
   :widths: 10, 30, 60

   "0x00", "RPARAM_GET", "Get one or more parameter values"
   "0xFF", "RPARAM_SET", "Set one or more parameter values"
   "0x55", "RPARAM_REPLY", "Packet containing parameters (from GET command)"
   "0x44", "RPARAM_TABLE", "Download full parameter table"
   "0x77", "RPARAM_COPY", "Copy from mem to mem"
   "0x88", "RPARAM_LOAD", "Load from storage to mem"
   "0x99", "RPARAM_SAVE", "Save from mem to storage"
   "0xAA", "RPARAM_CLEAR", "Delete from storage"

The parameter commands is sent in the following format:

Packet structure
----------------
The parameter server expects all requests to be in CSP format, and to contain the following data:

.. figure:: img/param_packet_format.png
   :width: 80 %
   
   Parameter Packet Format

The fields is described in the following table:

.. csv-table:: Packet structure
   :header-rows: 1
   :header: "**Field**", "**Length (bytes)**", "**Description**"
   :widths: 10, 30, 60
   
   "CMD", "1", "Command ID from table above"
   "MEM", "1", "Memory area to operate on"
   "LEN", "2", "Length of DATA field"
   "CHKSUM", "2", "Fletcher-16 checksum of parameter table with memory ID specified."
   "DATA", "0 .. 180", "Data field must be set according to command type"

Parameter table checksum
------------------------

The checksum is a part of all commands, and must match the on-board checksum of the parameter table.
The checksum can be obtained by running a fletcher-16 checksum on the parameter table.
The algorithm for fletcher-16 is:

.. code-block:: c

   static inline uint16_t fletcher16(uint8_t* data, int count) {
      uint16_t sum1 = 0;
      uint16_t sum2 = 0;
      int index;
      for (index = 0; index < count; ++index) {
         sum1 = (sum1 + data[index]) % 255;
         sum2 = (sum2 + sum1) % 255;
      }
      return (sum2 << 8) | sum1;
   }

If you do not have access to the parameter table, you must download the table using RPARAM_TABLE, and run the checksum on the table itself.
This check is done in order to verify that the request has been generated using the same parameter table definition as is used by the server.
If this is not verified, it may be possible to GET or SET a parameter which does not exist (out of memory scope) and can lead to undefined behavior.
In order to bypass the checksum feature, the CHKSUM field can be set to the following magic value: '0xB0 0x0B'.
This can be helpful while writing test code for the parameter client.

Data formats
------------

The DATA field of the parameter packet is formatted differently for each command. Here is a description of how each command is packed:

.. code-block:: c

   typedef struct __attribute__ ((packed)) rparam_frame_s {
      rparam_action action;            //! Type is the action performed
      uint8_t mem;               //! Memory area to work on (0 = RUNNING, 1 = SCRATCH)
      uint16_t length;              //! Length of the payload in bytes
      uint16_t checksum;               //! Fletcher's checksum
      union {
         uint16_t addr[0];          //! action = PARAM_GET
         uint8_t packed[0];            //! action = PARAM_REPLY | PARAM_SET
         struct {
            uint8_t from;
            uint8_t to;
         } copy;              //! action = PARAM_SAVE | PARAM_LOAD |PARAM_CLEAR
         struct {
            uint8_t id;
         } clear;
      };
   } rparam_query;
   
GET command
^^^^^^^^^^^

The GET command uses a packed 16-bit address array. Here you should put the list of parameters to download.
A special case is an empty GET command, which will download all parameters in a single packet.
Please note that this could is some cases exceed the MTU of the network system, in which case the message will be truncated to the maximum length.
In this case you must split your request into two GET commands.

SET / REPLY ' Packet data
^^^^^^^^^^^^^^^^^^^^^^^^^

When setting, or getting a reply on a GET command, the data will come in a serialized packed format.
This uses the parameter table to pack data in the following format: <addr><value>, <addr><value>, ' etc.
The unpack algorithm is as follows:

1. Read 16-bit addr into memory (note that this is big-endian)
2. Find the parameter name, type and size using the parameter table
3. Read the next <size> number of bytes into memory
4. Convert endian from big-endian to host byte order
5. Save result into local memory using memcpy

The serializer and deserializer is the heart of the parameter system, making it possible to request and modify any arbitrary parameter.
The source code for this requires a bit of programming experience, but can be obtained by contacting gomspace, or buying a subsystem containing the parameter system.

COPY
^^^^
The copy data field contains two bytes containing two memory areas <from> and <to>.

SAVE / LOAD / CLEAR
^^^^^^^^^^^^^^^^^^^
The save/load/clear commands uses the mem-id from the parameter packet header, and an additional storage file-id to know which file to operate on.

Parameter Table
---------------

The table download requires no data in the DATA field of the parameter request packet.
The response will be formatted as an array of the following data structures:

.. csv-table:: Parameter table format
   :header-rows: 1
   :header: "**Field**", "**Length (bytes)**", "**Description**"
   :widths: 10, 30, 60
   
   "ADDR", "2", "Parameter Address"
   "TYPE", "1", "Type of parameter (see table below)"
   "SIZE", "1", "Size of the parameter"
   "FLAGS", "1", "Reserved field"
   "NAME", "14", "Name of parameter"

Parameter Types
---------------

The parameter table describes the parameter types using a single byte according to the following table:

.. csv-table:: List of parameter types
   :header-rows: 1
   :header: "**Type**", "**Name**", "**Description**"
   :widths: 10, 30, 60
   
   "0", "PARAM_UINT8", "8-bit unsigned"
   "1", "PARAM_UINT16", "16-bit unsigned"
   "2", "PARAM_UINT32", "32-bit unsigned"
   "3", "PARAM_UINT64", "64-bit unsigned"
   "4", "PARAM_INT8", "8-bit signed"
   "5", "PARAM_INT16", "16-bit signed"
   "6", "PARAM_INT32", "32-bit signed"
   "7", "PARAM_INT64", "64-bit signed"
   "8", "PARAM_X8", "8-bit unsigned (printed as hex)"
   "9", "PARAM_X16", "16-bit unsigned (printed as hex)"
   "10", "PARAM_X32", "32-bit unsigned (printed as hex)"
   "11", "PARAM_X64", "64-bit unsigned (printed as hex)"
   "12", "PARAM_DOUBLE", "Double"
   "13", "PARAM_FLOAT", "Float"
   "14", "PARAM_STRING", "Array of bytes, dynamic length, printed as string"
   "15", "PARAM_DATA", "Array of bytes, dynamic length, printed as hex"
   "16", "PARAM_BOOL", "Boolean"

Parameter table download
------------------------
When requesting the parameter table, the reply will come as CSP packets using the Simple Fragmentation Protocol (SFP).
The reason is that the parameter table will normally span multiple CSP packets, and without any additional information, it is not possible to detect a missing packet.
If you have the latest version of libcsp, SFP will come as standard, otherwise look at libcsp.org in order to get the source code for this protocol. 
The SFP protocol adds a 32-bit data_offset and a 32-bit total_length, field at the end of every CSP message.
This can be used to know if any data has been missed during reception and do another request.
SFP does not have automatic retransmission, for that you need to enable RDP.
If you do not wish to use the SFP protocol, you can simply throw away the last 8-bytes of the message.


.. _libparam_structure:

Structure
=========

The |libparam| is structured as follows:

.. tabularcolumns:: |p{4.0cm}|p{12.0cm}|
.. table:: |libparam| structure

   ===========================  ==============================================
   **Folder**                   **Description**
   ===========================  ==============================================
   libparam/bindings/python     Python bindings for |libparam|
   libparam/include/param       |libparam| API header files
   libparam/src                 |libparam| API source code files. See :ref:`libparam_api` below for further details
   libparam/doc                 The doc folder contains the source code for this documentation
   ===========================  ==============================================

.. _libparam_api:

API
===

TBW
